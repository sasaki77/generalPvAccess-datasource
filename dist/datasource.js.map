{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","jsonData","prefix","noparams","enbSearch","param_names","options","query","buildQueryParameters","targets","filter","t","hide","when","data","doRequest","method","then","response","status","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","entity","rangeRaw","result","str","s","toString","split","target","interpolated","mapToTextValue","map","d","i","text","value","isObject","datasourceRequest","params","param_vals","len","pn","val","scopedVars","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n\n    const jsonData = instanceSettings.jsonData || {};\n\n    // PvAccess API settings\n    this.prefix = instanceSettings.jsonData.prefix;\n    this.noparams = instanceSettings.jsonData.noparams;\n    this.enbSearch = instanceSettings.jsonData.enbSearch;\n    this.param_names = instanceSettings.jsonData.param_names;\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    return this.doRequest({\n      url: this.url + '/query',\n      data: query,\n      method: 'POST'\n    });\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        prefix: this.prefix,\n        entity: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    var str = this.templateSrv.replace(query, null, 'regex');\n\n    if (str) {\n      var s = str.toString().split('=');\n      var target = (s[1] || '');\n      var name = (s[0] || '');\n    }\n    else{\n      var target = '';\n      var name = '';\n    }\n\n    var interpolated = {\n        target: target\n    };\n\n    interpolated.prefix = this.prefix;\n    interpolated.name = name;\n\n    return this.doRequest({\n      url: this.url + '/search',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      var params = {};\n      if (target.param_vals) {\n        for (var i = 0, len = this.noparams; i < len; i++) {\n          var pn = this.param_names[i];\n          var val = target.param_vals[pn];\n          params[pn] = val;\n        }\n      }\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie',\n        params: params\n      };\n    });\n\n    options.targets = targets;\n    options.jsonData = {prefix: this.prefix};\n\n    return options;\n  }\n}\n"]}