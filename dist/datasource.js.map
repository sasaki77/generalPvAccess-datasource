{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","jsonData","noparams","enbSearch","param_names","queryCh","annCh","searchCh","entityLabel","startLabel","endLabel","enbNTURI","annNoparams","annParam_names","options","query","buildQueryParameters","targets","filter","t","hide","when","data","doRequest","method","then","response","status","message","title","replace","annotation","params","param_vals","i","len","pn","val","annotationQuery","range","datasource","enable","iconColor","entity","rangeRaw","ch","entity_label","start_label","end_label","nturi_style","result","str","s","toString","split","target","interpolated","mapToTextValue","map","d","text","value","isObject","datasourceRequest","scopedVars","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n\n    const jsonData = instanceSettings.jsonData || {};\n\n    // PvAccess API settings\n    this.noparams = instanceSettings.jsonData.noparams;\n    this.enbSearch = instanceSettings.jsonData.enbSearch;\n    this.param_names = instanceSettings.jsonData.param_names;\n    this.queryCh = instanceSettings.jsonData.queryCh;\n    this.annCh = instanceSettings.jsonData.annCh;\n    this.searchCh = instanceSettings.jsonData.searchCh;\n    this.entityLabel = instanceSettings.jsonData.entityLabel;\n    this.startLabel = instanceSettings.jsonData.startLabel;\n    this.endLabel = instanceSettings.jsonData.endLabel;\n    this.enbNTURI = instanceSettings.jsonData.enbNTURI;\n    this.annNoparams = instanceSettings.jsonData.annNoparams;\n    this.annParam_names = instanceSettings.jsonData.annParam_names;\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    return this.doRequest({\n      url: this.url + '/query',\n      data: query,\n      method: 'POST'\n    });\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n\n    var params = {};\n    if (options.annotation.param_vals) {\n      for (var i = 0, len = this.noparams; i < len; i++) {\n        var pn = this.param_names[i];\n        var val = this.templateSrv.replace(options.annotation.param_vals[pn], {}, 'glob');\n        params[pn] = val;\n      }\n    }\n\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        entity: query,\n        params: params\n      },\n      rangeRaw: options.rangeRaw,\n      jsonData: { ch: this.annCh,\n                  entity_label: this.entityLabel,\n                  start_label: this.startLabel,\n                  end_label: this.endLabel,\n                  nturi_style: this.enbNTURI\n      }\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    var str = this.templateSrv.replace(query, null, 'regex');\n\n    if (str) {\n      var s = str.toString().split('=');\n      var target = (s[1] || '');\n      var name = (s[0] || '');\n    }\n    else{\n      var target = '';\n      var name = '';\n    }\n\n    var interpolated = {\n        target: target\n    };\n\n    interpolated.ch = this.searchCh;\n    interpolated.name = name;\n    interpolated.nturi_style = this.enbNTURI;\n\n    return this.doRequest({\n      url: this.url + '/search',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      var params = {};\n      if (target.param_vals) {\n        for (var i = 0, len = this.noparams; i < len; i++) {\n          var pn = this.param_names[i];\n          var val = this.templateSrv.replace(target.param_vals[pn], options.scopedVars, 'glob');\n          params[pn] = val;\n        }\n      }\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie',\n        params: params\n      };\n    });\n\n    options.targets = targets;\n    options.jsonData = {ch: this.queryCh,\n                        entity_label: this.entityLabel,\n                        start_label: this.startLabel,\n                        end_label: this.endLabel,\n                        nturi_style: this.enbNTURI};\n\n    return options;\n  }\n}\n"]}